<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Làm bài thi TOEIC - <%= test.title %></title>
  <link rel="icon" href="/images/icon.png" type="image/png">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
</head>
<body>
  <%- include('../partials/header') %>
  <main class="container my-4">
    <h2 class="mb-3"><%= test.title %></h2>

    <% if (isFullTest) { %>
      <!-- Khu vực điều khiển cho Full Test -->
      <div class="d-flex justify-content-between align-items-start mb-4">
        <div>
          <h1 class="mb-2 h3">TOEIC Full Test</h1>
          <a href="/toeic" class="btn btn-sm btn-outline-danger">Rời khỏi</a>
        </div>
        <div class="text-end">
          <div id="timer" class="h4 font-weight-bold text-danger mb-2">--:--</div>
          <a href="#" id="submit-test-btn-top" class="btn btn-primary">Nộp bài</a>
        </div>
      </div>
    <% } else { %>
      <!-- CHẾ ĐỘ LUYỆN TẬP -->
      <div class="d-flex justify-content-start align-items-center mb-4">
         <a href="/toeic" class="btn btn-sm btn-outline-danger"><i class="bi bi-arrow-left-circle"></i> Rời khỏi</a>
      </div>
    <% } %>

    <div class="test-navigation mb-4">
      <% 
        const partsToDisplay = isFullTest ? [1, 2, 3, 4, 5, 6, 7] : allowedParts;
        for(let i of partsToDisplay) { 
      %>
        <a href="/toeic/test?testId=<%= testId %>&part=<%= i %>" 
           class="btn <%= i == partNumber ? 'btn-primary' : 'btn-outline-primary' %> part-nav-link">
          Part <%= i %>
        </a>
      <% } %>
    </div>
    <div class="mb-4">
      <% if (partNumber === 1) { %>
        <%- include('parts/part1', { questions: questions }) %>
      <% } else if (partNumber === 2) { %>
        <%- include('parts/part2', { questions: questions }) %>
      <% } else if (partNumber === 3) { %>
        <%- include('parts/part3', { groups: groups }) %>
      <% } else if (partNumber === 4) { %>
        <%- include('parts/part4', { groups: groups }) %>
      <% } else if (partNumber === 5) { %>
        <%- include('parts/part5', { questions: questions }) %>
      <% } else if (partNumber === 6) { %>
        <%- include('parts/part6', { groups: groups }) %>
      <% } else if (partNumber === 7) { %>
        <%- include('parts/part7', { groups: groups }) %>
      <% } %>
    </div>

    <hr class="my-4">

    <div class="test-navigation d-flex justify-content-between">
      <div>
        <% if (partNumber > 1) { %>
          <a href="/toeic/test?testId=<%= testId %>&part=<%= partNumber - 1 %>" class="btn btn-secondary part-nav-link">&laquo; Part <%= partNumber - 1 %></a>
        <% } %>
      </div>
      <div>
        <% if (partNumber < 7) { %>
          <a href="/toeic/test?testId=<%= testId %>&part=<%= partNumber + 1 %>" class="btn btn-secondary part-nav-link">Part <%= partNumber + 1 %> &raquo;</a>
        <% } %>
      </div>
    </div>
    <div class="text-center mt-3">
        <a href="#" id="submit-test-btn-bottom" class="btn btn-primary btn-lg">Nộp bài</a>
    </div>

  </main>
  <%- include('../partials/footer') %>

  <!-- Modal kết quả TOEIC -->
  <div class="modal fade" id="resultModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Kết quả bài thi TOEIC</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body" id="resultModalBody">
          <!-- Nội dung sẽ render bằng JS -->
        </div>
        <div class="modal-footer">
          <a href="/toeic" class="btn btn-success">Về trang danh sách</a>
        </div>
      </div>
    </div>
  </div>

  <script>
  // Định nghĩa các biến và hàm cần truy cập toàn cục ở đây
  const testId = '<%= testId %>';
  
  const beforeUnloadHandler = (event) => {
    event.preventDefault();
    event.returnValue = ''; // Bắt buộc cho một số trình duyệt
  };

  function handleSubmit() {
    
    if (!confirm('Bạn chắc chắn muốn nộp bài?')) {
        return;
    }
    

    window.removeEventListener('beforeunload', beforeUnloadHandler);
   
    
    const key = `toeic_answers_${testId}`;
    
    let answers;

    try {
        const rawData = localStorage.getItem(key);
        
        answers = JSON.parse(rawData) || {};
        
    } catch (error) {
        
        alert("Lỗi khi đọc dữ liệu bài làm. Dữ liệu có thể đã bị hỏng.");
        return;
    }
    
    let answerArr = [];
    Object.values(answers).forEach(partObj => {
      Object.entries(partObj).forEach(([questionId, userAnswer]) => {
        answerArr.push({ questionId, userAnswer });
      });
    });
   

    if (answerArr.length === 0) {
        alert("Bạn chưa trả lời câu hỏi nào. Vui lòng làm bài trước khi nộp.");
        // Thêm lại cảnh báo nếu người dùng hủy nộp bài rỗng
        window.addEventListener('beforeunload', beforeUnloadHandler);
        return;
    }
    

    fetch('/toeic/submit', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        testId: testId,
        answers: answerArr,
        startedAt: localStorage.getItem(`toeic_started_${testId}`) || new Date().toISOString(),
        finishedAt: new Date().toISOString()
      })
    })
    .then(res => {
        
        return res.json();
    })
    .then(data => {
      
      localStorage.removeItem(key);
      localStorage.removeItem('toeic_timer_' + testId);
      localStorage.removeItem(`toeic_started_${testId}`);
      if (data.success) {
        showResultPopup(data);
      } else {
        alert('Có lỗi khi nộp bài: ' + (data.message || ''));
      }
    })
    .catch(err => {
      // Nếu có lỗi, thêm lại cảnh báo để người dùng không mất bài
      window.addEventListener('beforeunload', beforeUnloadHandler);
      
      alert('Lỗi kết nối khi nộp bài!');
    });
  }

  function showResultPopup(result) {
    let html = `<div><b>Tổng điểm quy đổi:</b> ${result.totalScore}</div>`;
    html += `<div><b>Kết quả từng phần:</b><ul>`;
    result.parts.forEach(part => {
      html += `<li>Part ${part.number}: ${part.correct}/${part.total} câu đúng</li>`;
    });
    html += `</ul></div>`;
    html += `<hr><b>Chi tiết từng câu:</b><ol>`;
    result.details.forEach(q => {
      html += `<li>
        Câu ${q.number} (Part ${q.part}): 
        <span class="${q.isCorrect ? 'text-success' : 'text-danger'}">
          ${q.isCorrect ? 'Đúng' : 'Sai'}
        </span>
        <br>Đáp án của bạn: <b>${q.userAnswer || '(bỏ trống)'}</b>
        <br>Đáp án đúng: <b>${q.correctAnswer}</b>
      </li>`;
    });
    html += `</ol>`;
    document.getElementById('resultModalBody').innerHTML = html;
    const modalEl = document.getElementById('resultModal');
    const modal = new bootstrap.Modal(modalEl);
    modal.show();

    // Khi modal bị đóng (bấm X hoặc ra ngoài), tự động chuyển về /toeic
    modalEl.addEventListener('hidden.bs.modal', function handler() {
      window.location.href = '/toeic';
      modalEl.removeEventListener('hidden.bs.modal', handler);
    });
  }

  // Các logic khác có thể đặt trong DOMContentLoaded để đảm bảo các element đã tồn tại
  document.addEventListener('DOMContentLoaded', () => {

    // Gán sự kiện click cho các nút Nộp Bài bằng Javascript
    // Đây là cách làm tin cậy hơn là dùng onclick="" trong HTML
    const submitButtons = document.querySelectorAll('#submit-test-btn-top, #submit-test-btn-bottom');
    

    submitButtons.forEach(button => {
      button.addEventListener('click', function(event) {
        event.preventDefault(); // Ngăn thẻ <a> chuyển trang
        handleSubmit();
      });
    });

    window.addEventListener('beforeunload', beforeUnloadHandler);

    // Khi người dùng chuyển qua lại giữa các PART, đây là hành động an toàn.
    // Chúng ta cần gỡ bỏ cảnh báo 'beforeunload' để họ không bị làm phiền.
    document.querySelectorAll('.part-nav-link').forEach(link => {
      link.addEventListener('click', () => {
        window.removeEventListener('beforeunload', beforeUnloadHandler);
      });
    });

    // Cảnh báo 'beforeunload' ở trên sẽ tự động xử lý các trường hợp khác
    // như nhấn nút "Rời khỏi bài làm", vì chúng ta không gỡ bỏ nó cho các link đó.
  
    const secondsRemaining = Number('<%= secondsRemaining %>');
    if (secondsRemaining > 0) {
        const timerKey = 'toeic_timer_' + testId;
        let remaining = localStorage.getItem(timerKey);

        if (remaining === null) {
          remaining = secondsRemaining;
        }

        const timerDisplay = document.getElementById('timer');
        let interval; // Khai báo interval ở đây

        function runTimer() {
          if (remaining < 0) {
            clearInterval(interval);
            timerDisplay.textContent = "00:00";
            alert('Hết giờ làm bài!');
            handleSubmit();
            return;
          }

          let minutes = parseInt(remaining / 60, 10);
          let seconds = parseInt(remaining % 60, 10);
          minutes = minutes < 10 ? "0" + minutes : minutes;
          seconds = seconds < 10 ? "0" + seconds : seconds;
          timerDisplay.textContent = minutes + ":" + seconds;

          localStorage.setItem(timerKey, remaining);
          remaining--;
        }

        // Chạy ngay lập tức 1 lần để không bị trễ 1s
        runTimer();
        // Sau đó mới lặp lại mỗi giây
        interval = setInterval(runTimer, 1000);
    }
  });
  </script>
</body>
</html> 