<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/">H·ªçc Ti·∫øng Anh</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/">Trang ch·ªß</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/lessons">B√†i h·ªçc</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/vocabulary">T·ª´ v·ª±ng</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/practice">Luy·ªán t·∫≠p</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-8 text-center">
                <div id="practiceHeader">
                    <div class="mb-4" style="margin-top:60px;">
                        <div id="level-bar-chart" style="max-width:500px;margin:0 auto;">
                            <div style="display:flex;align-items:flex-end;justify-content:space-between;height:200px;position:relative;">
                                <div class="level-col">
                                    <div class="level-count" style="color:#d32f2f;">0 t·ª´</div>
                                    <div class="level-bar" style="height:20px;background:#e57373;"></div>
                                    <div class="level-label">1</div>
                                </div>
                                <div class="level-col">
                                    <div class="level-count" style="color:#fbc02d;">0 t·ª´</div>
                                    <div class="level-bar" style="height:20px;background:#ffe082;"></div>
                                    <div class="level-label">2</div>
                                </div>
                                <div class="level-col">
                                    <div class="level-count" style="color:#039be5;">0 t·ª´</div>
                                    <div class="level-bar" style="height:20px;background:#81d4fa;"></div>
                                    <div class="level-label">3</div>
                                </div>
                                <div class="level-col">
                                    <div class="level-count" style="color:#1976d2;">0 t·ª´</div>
                                    <div class="level-bar" style="height:20px;background:#90caf9;"></div>
                                    <div class="level-label">4</div>
                                </div>
                                <div class="level-col">
                                    <div class="level-count" style="color:#1a237e;font-weight:bold;">0 t·ª´</div>
                                    <div class="level-bar" style="height:20px;background:#283593;"></div>
                                    <div class="level-label">5</div>
                                </div>
                                <div style="position:absolute;left:0;right:0;bottom:-10px;height:8px;background:#ccc;border-radius:4px;"></div>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3" style="font-size:1.2rem;">
                        <span style="color:#ff9800;">Chu·∫©n b·ªã √¥n t·∫≠p: <b id="reviewCount">0 t·ª´</b></span>
                    </div>
                    <div class="mb-4">
                        <button id="mainActionBtn" class="btn btn-success btn-lg px-5 py-3" style="font-size:1.3rem;border-radius:2rem;box-shadow:0 4px 0 #388e3c;">H·ªçc t·ª´ m·ªõi</button>
                    </div>
                </div>
                <div id="practiceArea" style="display:none;">
                    <div id="practiceContent"></div>
                </div>
            </div>
        </div>
    </div>
    <style>
        #level-bar-chart {margin-bottom:10px;}
        .level-col {display:flex;flex-direction:column;align-items:center;flex:1;z-index:2;}
        .level-bar {
            width:54px;
            border-radius:18px 18px 18px 18px/32px 32px 8px 8px;
            margin-bottom:8px;
            box-shadow:0 4px 12px rgba(40,53,147,0.08);
            display:flex;
            align-items:flex-end;
        }
        .level-count {
            font-size:1.1rem;
            font-weight:600;
            margin-bottom:8px;
        }
        .level-label {
            font-size:1.5rem;
            font-weight:700;
            margin-top:8px;
        }
        #practiceHeader { transition: 0.4s; }
        #practiceArea { transition: 0.4s; }
        /* Flashcard flip */
        .flashcard-outer { perspective: 1000px; }
        .flashcard {
            width: 100%;
            min-height: 220px;
            transition: transform 0.5s;
            transform-style: preserve-3d;
            position: relative;
            cursor: pointer;
        }
        .flashcard-front, .flashcard-back {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            top: 0; left: 0;
        }
        .flashcard-back {
            transform: rotateY(180deg);
        }
        .flashcard.flipped {
            transform: rotateY(180deg);
        }
        .flashcard .btn { pointer-events: auto; }
        .flashcard-back .btn { margin-top: 8px; }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // --- K·∫øt n·ªëi backend ---
        let reviewWords = [];
        let PRACTICE_TYPES = ['listen', 'fill', 'flashcard'];
        let queue = [];
        let current = null;
        let progressMap = {};
        // L·∫•y d·ªØ li·ªáu t·ª´ backend khi b·∫Øt ƒë·∫ßu √¥n t·∫≠p
        async function fetchPracticeData() {
            const res = await fetch('/practice/data');
            const data = await res.json();
            if (data.success) {
                reviewWords = data.words;
                // Kh·ªüi t·∫°o queue luy·ªán t·∫≠p
                queue = reviewWords.map(w => ({...w, remain: [...PRACTICE_TYPES]}));
                // Map id ƒë·ªÉ g·ª≠i k·∫øt qu·∫£
                progressMap = {};
                reviewWords.forEach(w => { progressMap[w.word] = w.id; });
            } else {
                reviewWords = [];
                queue = [];
            }
        }
        // G·ª≠i k·∫øt qu·∫£ luy·ªán t·∫≠p v·ªÅ backend
        async function sendPracticeResult(word, result) {
            const id = word.id || progressMap[word.word];
            if (!id) return;
            await fetch('/practice/progress', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id, result })
            });
        }
        function pickRandomType(remain) {
            return remain[Math.floor(Math.random() * remain.length)];
        }
        function nextPractice() {
            if (queue.length === 0) {
                document.getElementById('practiceContent').innerHTML = `
                    <div class="alert alert-success mb-4">B·∫°n ƒë√£ ho√†n th√†nh √¥n t·∫≠p h√¥m nay!</div>
                    <button class="btn btn-success btn-lg" onclick="window.location.href='/practice'">Ho√†n th√†nh</button>
                `;
                return;
            }
            // L·∫•y t·ª´ ƒë·∫ßu queue
            current = queue.shift();
            // Ch·ªçn d·∫°ng b√†i t·∫≠p ng·∫´u nhi√™n trong c√°c d·∫°ng c√≤n l·∫°i
            current.type = pickRandomType(current.remain);
            renderPractice(current);
        }
        function renderPractice(word) {
            let html = '';
            if (word.type === 'listen') {
                html = `
                    <div class="mb-3" style="font-size:1.2rem;color:#888;">Nghe & ƒëi·ªÅn t·ª´</div>
                    <button class="btn btn-light mb-3" onclick="playAudio()"><span>üîä</span> Nghe ph√°t √¢m</button>
                    <div class="mb-3"><input id="listenInput" type="text" class="form-control form-control-lg text-center" placeholder="Nh·∫≠p t·ª´ b·∫°n nghe ƒë∆∞·ª£c" autocomplete="off"></div>
                    <button class="btn btn-primary" onclick="checkListen()">Ki·ªÉm tra</button>
                `;
            } else if (word.type === 'fill') {
                html = `
                    <div class="mb-3" style="font-size:1.2rem;color:#888;">ƒêi·ªÅn t·ª´</div>
                    <div class="mb-3" style="font-size:2rem;">${word.meaning}</div>
                    <div class="mb-3"><input id="fillInput" type="text" class="form-control form-control-lg text-center" placeholder="Nh·∫≠p t·ª´ ti·∫øng Anh" autocomplete="off"></div>
                    <button class="btn btn-primary" onclick="checkFill()">Ki·ªÉm tra</button>
                `;
            } else if (word.type === 'flashcard') {
                html = `
                    <div class="flashcard-outer mx-auto mb-4" style="max-width:400px;">
                        <div class="flashcard card" id="flashcard" tabindex="0">
                            <div class="flashcard-front card-body text-center">
                                <h2 class="card-title">${word.word}</h2>
                                <p class="card-text text-muted">${word.pron}</p>
                                <div class="text-muted" style="font-size:1.1rem;">(Click ƒë·ªÉ l·∫≠t th·∫ª)</div>
                            </div>
                            <div class="flashcard-back card-body text-center">
                                <p><b>Nghƒ©a:</b> ${word.meaning}</p>
                                <p><b>V√≠ d·ª•:</b> ${word.example}</p>
                                <div class="mt-4">
                                    <button class="btn btn-success me-2" onclick="flashcardRemember()">T√¥i nh·ªõ</button>
                                    <button class="btn btn-outline-danger" onclick="flashcardForget()">T√¥i qu√™n</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }
            document.getElementById('practiceContent').innerHTML = html;
            if (word.type === 'flashcard') {
                setTimeout(() => {
                    const card = document.getElementById('flashcard');
                    let flipped = false;
                    card.addEventListener('click', function() {
                        flipped = !flipped;
                        card.classList.toggle('flipped', flipped);
                    });
                }, 10);
            }
        }
        // H√†m ki·ªÉm tra d·∫°ng nghe-ƒëi·ªÅn
        window.checkListen = function() {
            const val = document.getElementById('listenInput').value.trim().toLowerCase();
            if (val === current.word.toLowerCase()) {
                afterCorrect();
            } else {
                afterWrong();
            }
        }
        // H√†m ki·ªÉm tra d·∫°ng ƒëi·ªÅn t·ª´
        window.checkFill = function() {
            const val = document.getElementById('fillInput').value.trim().toLowerCase();
            if (val === current.word.toLowerCase()) {
                afterCorrect();
            } else {
                afterWrong();
            }
        }
        // Flashcard: nh·ªõ
        window.flashcardRemember = function() {
            afterCorrect();
        }
        // Flashcard: qu√™n
        window.flashcardForget = function() {
            afterWrong();
        }
        // X·ª≠ l√Ω ƒë√∫ng
        function afterCorrect() {
            sendPracticeResult(current, 'correct');
            setTimeout(nextPractice, 400);
        }
        // X·ª≠ l√Ω sai
        function afterWrong() {
            sendPracticeResult(current, 'wrong');
            queue.push(current);
            setTimeout(nextPractice, 400);
        }
        // (Demo) play audio
        window.playAudio = function() {
            const utterance = new SpeechSynthesisUtterance(current.word);
            utterance.lang = 'en-US';
            speechSynthesis.speak(utterance);
        }
        // B·∫Øt ƒë·∫ßu luy·ªán t·∫≠p
        const mainBtn = document.getElementById('mainActionBtn');
        function updateMainBtn() {
            // S·ªë t·ª´ c·∫ßn √¥n s·∫Ω l·∫•y t·ª´ backend n·∫øu mu·ªën hi·ªÉn th·ªã ƒë·ªông
            mainBtn.textContent = 'B·∫Øt ƒë·∫ßu √¥n t·∫≠p';
            mainBtn.className = 'btn btn-primary btn-lg px-5 py-3';
            mainBtn.onclick = async function() {
                document.getElementById('practiceHeader').style.display = 'none';
                document.getElementById('practiceArea').style.display = '';
                await fetchPracticeData();
                if (queue.length === 0) {
                    document.getElementById('practiceContent').innerHTML = '<div class="alert alert-info">Kh√¥ng c√≥ t·ª´ n√†o c·∫ßn √¥n t·∫≠p h√¥m nay!</div>';
                } else {
                    nextPractice();
                }
            };
        }
        updateMainBtn();
        // --- Bi·ªÉu ƒë·ªì ƒë·ªông ho√†n to√†n ---
        async function updateLevelChart() {
            try {
                const res = await fetch('/practice/level-stats');
                const data = await res.json();
                if (data.success) {
                    const levels = data.levels;
                    const max = Math.max(...levels, 1);
                    const maxHeight = 180; // px
                    const cols = document.querySelectorAll('.level-col');
                    levels.forEach((count, idx) => {
                        const countEl = cols[idx].querySelector('.level-count');
                        countEl.textContent = count + ' t·ª´';
                        const bar = cols[idx].querySelector('.level-bar');
                        bar.style.height = (count > 0 ? (count / max * maxHeight) : 20) + 'px';
                    });
                }
            } catch (e) {}
        }
        updateLevelChart();
        // --- S·ªë t·ª´ c·∫ßn √¥n t·∫≠p ƒë·ªông ---
        async function updateReviewCount() {
            try {
                const res = await fetch('/practice/data');
                const data = await res.json();
                if (data.success) {
                    document.getElementById('reviewCount').textContent = data.words.length + ' t·ª´';
                }
            } catch (e) {}
        }
        updateReviewCount();
    </script>
</body>
</html> 